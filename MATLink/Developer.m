(* :Context: MATLink`Developer` *)

BeginPackage["MATLink`Developer`", {"MATLink`"}]

$ApplicationDirectory::usage = "Directory where MATLink is installed (usually, $UserBaseDirectory/Applications/)"
$ApplicationDataDirectory::usage = "Directory where MATLink's log file is stored."
$EngineSourceDirectory::usage = ""
$LogFile::usage = ""
writeLog::usage = ""
ClearLog::usage = "ClearLog[] clears MATLink's log file."
ShowLog::usage = "ShowLog[] shows the contents of MATLink's log file."
message::usage = ""
$SettingsFile::usage = ""
ResetSettings::usage = "ResetSettings[] resets MATLink to the default settings."
$Force32BitEngine::usage = ""
$EngineWordLength::usage = ""
$BinaryDirectory::usage = ""
$BinaryPath::usage = ""
CompileMEngine::usage = "CompileMEngine[] will compile the MATLAB Engine binaries (necessary only in some flavours of Linux)"
FileHashList::usage = ""
GetInfo::usage = ""
CleanupTemporaryDirectories::usage = "CleanupTemporaryDirectories[] removes temporary directories created in $TemporaryDirectory."

Begin["`Private`"]
(* Application directories & file paths *)
$ApplicationDirectory = DirectoryName@$InputFileName;
$ApplicationDataDirectory = FileNameJoin[{$UserBaseDirectory, "ApplicationData", "MATLink"}];
$EngineSourceDirectory = FileNameJoin[{$ApplicationDirectory, "Engine", "src"}];

(* Log files and related functions *)
If[!DirectoryQ@$ApplicationDataDirectory, CreateDirectory@$ApplicationDataDirectory];

$LogFile = FileNameJoin[{$ApplicationDataDirectory, "MATLink.log"}]

(* Log message types:
	matlink - Standard MATLink` action
	info    - System info
	user    - User initiated action
	warning - MATLink` warning
	error   - MATLink` error
	fatal   - Fatal error; cannot recover *)
writeLog[message_, type_ : "matlink"] :=
        Module[{str = OpenAppend[$LogFile], date = DateString[]},
            WriteString[str, StringJoin @@ Riffle[{date, type, message, "\n"}, "\t"]];
            Close[str];
        ]

ClearLog[] := Module[{str = OpenWrite[$LogFile]}, Close@str;]

ShowLog[] := FilePrint@$LogFile

SetAttributes[message, HoldFirst]
message[m_MessageName, args___][type_] :=
        Module[{msg},
            msg = Switch[Head@m, String, m, MessageName, m /. HoldPattern[MessageName[_, s_]] :> MessageName[General, s]];
            writeLog[ToString@StringForm[msg, args], type];
            Message[m, args];
        ]

(* Settings file *)
$SettingsFile = FileNameJoin[{$ApplicationDataDirectory, "init.m"}];

$DefaultMATLinkOptions = {"Force32BitEngine" -> False};
Options@MATLink = $DefaultMATLinkOptions;

MATLink /: SetOptions[MATLink, opts_] :=
        With[{currOpts = Options@MATLink, str = OpenWrite@$SettingsFile},
            Unprotect@MATLink;
            WriteString[str, "(* This file is automatically generated by MATLink. Do not edit this file or modify its contents.\nUse SetOptions[MATLink, {option -> value}] to modify the default options. *)\n"];
            Write[str,
                Options@MATLink = Sort@DeleteDuplicates[# ~ Join ~ currOpts &@ FilterRules[opts, $DefaultMATLinkOptions], First@# == First@#2&]
            ];
            Close@str;
            Protect@MATLink;
            writeLog["MATLink settings changed: " <> ToString@Options@MATLink, "user"];
        ]

ResetSettings[] :=
        Module[{str = OpenWrite@$SettingsFile},
            Close@str;
            Unprotect@MATLink;
            SetOptions[MATLink, $DefaultMATLinkOptions];
            Protect@MATLink;
            writeLog["Reset settings to default.", "user"];
        ]

If[FileExistsQ@$SettingsFile,
    Options@MATLink = Get@$SettingsFile;,

    writeLog["Missing init.m; Creating a new file.", "matlink"];
    ResetSettings[]
]

(* Binary directories: The $Force32BitEngine flag makes it possible to force using a 32 bit MATLAB with a 64 bit Mathematica.
   Mainly useful on Windows where the student version of MATLAB is 32-bit only.
   To use it permanently, evaluate SetOption[MATLink, "Force32BitEngine" -> True] *)

$Force32BitEngine := OptionValue[MATLink, "Force32BitEngine"]
$EngineWordLength := If[TrueQ[$Force32BitEngine], 32, $SystemWordLength]
$BinaryDirectory := FileNameJoin[{$ApplicationDirectory, "Engine", "bin", $OperatingSystem <> IntegerString[$EngineWordLength]}];
$BinaryPath := FileNameJoin[{$BinaryDirectory, If[$OperatingSystem === "Windows", "mengine.exe", "mengine"]}];

(* Other Developer` functions *)
CompileMEngine::unsupp = "Automatically compiling the MATLink Engine from source for `` is not supported. Please compile it manually."
CompileMEngine::failed = "Automatically compiling the MATLink Engine has failed. Please try to compile it manually and ensure that the path to the MATLAB directory is set correctly in the makefile."

(* CompileMEngine[] will Abort[] on failure to avoid an infinite loop. *)
CompileMEngine[] :=
        Module[{},
            writeLog["Compiled MATLink Engine on " <> $OperatingSystem, "user"];
            CompileMEngine[$OperatingSystem]
        ]

CompileMEngine["MacOSX"] :=
        Block[{dir = Directory[]},
            If[$EngineWordLength == 32,
                message[CompileMEngine::unsupp, "32-bit OS X"]["fatal"];
                Abort[]
            ];
            SetDirectory[$EngineSourceDirectory];
            PrintTemporary["Compiling the MATLink Engine from source...\n"];
            If[ Run["make -f Makefile.osx"] != 0,
                SetDirectory[dir];
                message[CompileMEngine::failed]["fatal"];
                Abort[];
            ];
            Run["mv mengine " <> $BinaryPath];
            Run["make -f Makefile.osx clean"];
            SetDirectory[dir];
        ]

CompileMEngine["Unix"] :=
        Block[{dir = Directory[], makefile},
            If[$EngineWordLength == 64, makefile = "Makefile.lin64", makefile = "Makefile.lin32"];
            SetDirectory[$EngineSourceDirectory];
            PrintTemporary["Compiling the MATLink Engine from source...\n"];
            If[ Run["make -f " <> makefile] != 0,
                SetDirectory[dir];
                message[CompileMEngine::failed]["fatal"];
                Abort[];
            ];
            Run["mv mengine " <> $BinaryPath];
            Run["make -f " <> makefile <> " clean"];
            SetDirectory[dir];
        ]

CompileMEngine[os_] := (message[CompileMEngine::unsupp, os]["fatal"]; Abort[])

CleanupTemporaryDirectories[] :=
        Module[{dirs = FileNames@FileNameJoin[{$TemporaryDirectory, "MATLink*"}]},
            writeLog[ToString@StringForm["Removed `` temporary directories", Length@dirs]];
            DeleteDirectory[#, DeleteContents -> True] & /@ dirs;
        ]

FileHashList[] :=
        With[{dir = $ApplicationDirectory},
            { StringTrim[#, dir], FileHash@#} & /@ Select[FileNames["*", dir, Infinity],
                Not@DirectoryQ@# && StringFreeQ[#, {".git", ".DS_Store"}] &
            ]
        ] // TableForm

GetInfo[] :=
        Block[{csh, gpp, matlab, OS = $OperatingSystem},
            csh[] := "csh:\n" <> Import["!which csh", "Text"];
            gpp[] := "g++:\n" <> Import["!which g++", "Text"];

            matlab[] := "MATLAB:\n" <> Switch[OS,
                "MacOSX",
                Import["!ls -d /Applications/MATLAB*.app", "Text"]
                ,
                "Unix",
                Import["!echo $(dirname $(readlink -f $(which matlab)))/.."]
            ];

            Switch[OS,
                "MacOSX",
                Print @@ Riffle[{
                    MATLink`Information`$Version, $Version,
                    csh[], matlab[]
                }, "\n\n"]
                ,
                "Unix",
                Print @@ Riffle[{
                    MATLink`Information`$Version, $Version,
                    csh[], gpp[], matlab[]
                }]
            ]
        ]

End[]

EndPackage[]